////////////////////////////////////////////////////////
//
//  DATA UPLOAD
//
////////////////////////////////////////////////////////


//ACLED data
var events = ee.FeatureCollection('users/salem043/ACLED_wide');

Map.addLayer(events, {color: 'red'}, 'conflict');
print("Conflict events", events.limit(10));


//Iraq country boundary shapefile
var Iraq = ee.FeatureCollection('users/salem043/Iraq_boundary');

//Aerosol index for Iraq in 2019
var airq_19 = ee.ImageCollection('COPERNICUS/S5P/NRTI/L3_AER_AI')
  .select('absorbing_aerosol_index').
  map(function(image){return image.clip(Iraq)}) 
  .filterDate('2019-01-01', '2019-01-31');


//Daily mean aerosol index
var days = ee.List.sequence(1, 31);
var composites = ee.ImageCollection.fromImages(days.map(function(d) {
  var filtered = airq_19.filter(ee.Filter.calendarRange({
    start: d,
    field: 'day_of_year'
  }));
  return filtered.mean().set('day', d);
}));
print("Composite aerosol", composites);


////////////////////////////////////////////////////////
//
//  Create grids
//
////////////////////////////////////////////////////////

//Bounding box over Iraq
var lat_start = 29.0990251735;
var lat_end = 37.2298725449;
var lon_start = 38.7923405291; 
var lon_end = 48.5679712258;

//Set number of grid cells
var num_cells = 10;
var lon_edge = (lon_end-lon_start)/Math.sqrt(num_cells);
var lat_edge = (lat_end-lat_start)/Math.sqrt(num_cells);
// 3) Create the grid
var polys = [];
var polys_line = [];
var cell_id = 0;
for (var lon = lon_start; lon < lon_end; lon += lon_edge) {
  var x1 = lon;
  var x2 = lon + lon_edge;
  for (var lat = lat_start; lat < lat_end; lat += lat_edge) {
    cell_id = cell_id + 1;
    var y1 = lat;
    var y2 = lat + lat_edge;

    polys.push(ee.Feature(ee.Geometry.Rectangle(x1, y1, x2, y2), {label: cell_id}));
  }
}

//Final grid, restricted to Syria boundaries
var grid = ee.FeatureCollection(polys).filterBounds(Iraq);
print('Final grid', grid);
Map.addLayer(grid);

//Find area of one grid cell

var poly = grid.filter(ee.Filter.eq('system:index', "0"));
Map.addLayer(poly);
print(poly);


var polygon = ee.Geometry.Polygon([
  [[38.7923405291,29.0990251735], 
  [41.88366638572307,29.0990251735],
  [41.88366638572307,31.6702248735817], 
  [38.7923405291,31.6702248735817], 
  [38.7923405291,29.0990251735]]
]);
Map.addLayer(polygon);
print('Polygon area: ', polygon.area().divide(1000 * 1000));
//Reports in square kilometers


//////////////////////////////////////////////////////////////////
//
//  ADD NUMBER OF CONFLICT EVENTS PER GRID CELL DAILY
//
//////////////////////////////////////////////////////////////////


// Define a spatial filter as geometries that intersect.
var spatialFilter = ee.Filter.intersects({
  leftField: '.geo',
  rightField: '.geo'
});

var joinAll = ee.Join.saveAll('matched').apply(events, grid, spatialFilter);

print(joinAll);



var SSAdata = joinAll.map(function(feature){
  var joinedFeat =  ee.List(feature.get('matched'));
  var polygon = ee.Feature(ee.FeatureCollection(joinedFeat).first());
  return ee.Feature(feature.copyProperties(polygon)).select(properties);
});

print(SSAdata);
